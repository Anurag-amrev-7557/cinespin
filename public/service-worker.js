import { precacheAndRoute } from 'workbox-precaching';

// Automatically inject the manifest generated by Workbox
precacheAndRoute(self.__WB_MANIFEST);

// Cache versioning
const CACHE_VERSION = `v${new Date().toISOString().slice(0, 10)}`; // e.g., 'v2025-04-20'
const CACHE_NAME = `cinespin-cache-${CACHE_VERSION}`;
const OFFLINE_URL = '/offline.html'; // Optional: create one if desired

// List of files to cache for precaching
const PRECACHE_ASSETS = [
  '/',
  '/index.html',
  '/logo.webp',
  '/manifest.json',
  '/src/pages/Auth/Login/Login.jsx',
  '/src/pages/Auth/Login/Login.css',
  '/src/pages/Auth/Register/Register.jsx',
  '/src/pages/Auth/Register/Register.css',
];

// Install event - pre-cache static assets
self.addEventListener('install', (event) => {
  self.skipWaiting(); // Activate the service worker immediately
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return Promise.all(
        PRECACHE_ASSETS.map((url) => {
          return fetch(url).then((response) => {
            if (response.ok) {
              return cache.put(url, response);
            } else {
              console.error(`Failed to cache ${url}:`, response.statusText);
            }
          }).catch((error) => {
            console.error(`Error fetching ${url}:`, error);
          });
        })
      );
    }).catch((error) => {
      console.error('Failed to open cache:', error);
    })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  clients.claim(); // Claim the client to control the page immediately
  event.waitUntil(
    caches.keys().then((keys) => {
      return Promise.all(
        keys.map((key) => {
          // Delete caches that do not match the current version
          if (key !== CACHE_NAME) {
            return caches.delete(key);
          }
        })
      );
    })
  );
});

// Fetch event - serve from cache, fallback to network, then fallback to offline
self.addEventListener('fetch', (event) => {
  if (event.request.method !== 'GET') return; // Only handle GET requests

  event.respondWith(
    caches.match(event.request).then((cached) => {
      return (
        cached || // Return cached response if available
        fetch(event.request).catch(() => {
          if (event.request.mode === 'navigate') {
            // For navigation requests, show offline page if available
            return caches.match(OFFLINE_URL);
          }
        })
      );
    })
  );
});